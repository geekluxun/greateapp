<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

    <!-- 基础配置资源加载
      以下两种方式是等价的！！！
     -->
    <!--<context:property-placeholder-->
            <!--location="classpath*:sapplication.properties, classpath*:application.properties"/>-->
    <bean id="propertyConfigure"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:application.properties</value>
            </list>
        </property>
    </bean>
    
    

     <!--启动注解-->
    <context:annotation-config />
    
    <!--指明spring bean 扫描包根路径-->
    <!--
       1、如果 use-default-filters=false 需要在include
       exclude中显示的指明包含或排除的扫描范围，如果是默认true,只要指明自己"另外"想要include和exclude的范围即可
       2、如果springbootApplication 默认是启用的@ComponetScan 注解，此配置将失效，不起作用！！！
    -->
    <context:component-scan base-package="com.geekluxun.greateapp" use-default-filters="true">
        <!--<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
    </context:component-scan >
    
    
    <tx:annotation-driven transaction-manager="transactionManager" />



    <tx:advice id="transAdvice">
        <tx:attributes>
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
            <tx:method name="*" propagation="REQUIRES_NEW"
                rollback-for="java.lang.Throwable" isolation="DEFAULT" />
        </tx:attributes>
    </tx:advice>


    <!--<aop:config>-->
        <!--&lt;!&ndash; <aop:advisor advice-ref="transAdvice"-->
            <!--pointcut="execution(* com.namibank.df.mallOrder.service..*(..))" /> &ndash;&gt;-->
        <!--<aop:pointcut expression="execution(* com.namibank.df.mallOrder.service..*(..))" id="serviceOperate"/>-->
        <!--<aop:advisor advice-ref="transAdvice" pointcut-ref="serviceOperate"/>-->
    <!--</aop:config>-->


    <import resource="classpath:spring/spring-database.xml" />
    <import resource="classpath:spring/spring-quartz.xml" />
    <import resource="classpath:spring/active-mq.xml"/>
    <import resource="classpath:spring/spring-kafka-producer-02.xml"/>
    <import resource="classpath*:spring/spring-kafka-consumer-02.xml"/>
    <import resource="classpath:spring/spring-kafka-producer.xml"/>
    <import resource="classpath*:spring/spring-kafka-consumer.xml"/>
    <import resource="classpath*:spring/spring-data-redis.xml"/>
    <import resource="classpath*:spring/spring-common.xml"/>
    <import resource="classpath*:spring/spring-cache.xml"/>

</beans>